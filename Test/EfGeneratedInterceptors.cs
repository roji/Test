// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Diagnostics;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Infrastructure.Internal;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Query;
using Microsoft.EntityFrameworkCore.Query.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Threading.Tasks;

#pragma warning disable EF9100 // Precompiled query is experimental

namespace Microsoft.EntityFrameworkCore.GeneratedInterceptors
{
    file static class EntityFrameworkCoreInterceptors
    {
        #region Query1

        [InterceptsLocation("/Users/roji/projects/test/Test/Program.cs", 31, 19)]
        public static IQueryable<TSource> Query1_Where1<TSource>(this IQueryable<TSource> source, Expression<Func<TSource, bool>> predicate)
        {
            var precompiledQueryContext = new PrecompiledQueryContext<TSource>(((IInfrastructure<DbContext>)source).Instance);
            return precompiledQueryContext;
        }

        [InterceptsLocation("/Users/roji/projects/test/Test/Program.cs", 31, 47)]
        public static List<TSource> Query1_ToList2<TSource>(this IEnumerable<TSource> source)
        {
            var precompiledQueryContext = (PrecompiledQueryContext<TSource>)source;
            var queryContext = precompiledQueryContext.QueryContext;
            Query1_Executor ??= Query1_GenerateExecutor(precompiledQueryContext.DbContext, precompiledQueryContext.QueryContext);
            var queryingEnumerable = ((Func<QueryContext, IEnumerable<TSource>>)Query1_Executor)(queryContext);
            return queryingEnumerable.ToList();
        }

        private static object Query1_GenerateExecutor(DbContext dbContext, QueryContext queryContext)
        {
            var relationalModel = dbContext.Model.GetRelationalModel();
            var relationalTypeMappingSource = dbContext.GetService<IRelationalTypeMappingSource>();
            var materializerLiftableConstantContext = new RelationalMaterializerLiftableConstantContext(
                dbContext.GetService<ShapedQueryCompilingExpressionVisitorDependencies>(),
                dbContext.GetService<RelationalShapedQueryCompilingExpressionVisitorDependencies>(),
                dbContext.GetService<RelationalCommandBuilderDependencies>());
            var relationalCommandTemplate = (IRelationalCommandTemplate)new RelationalCommand(materializerLiftableConstantContext.CommandBuilderDependencies, "SELECT [b].[Id], [b].[Name]\nFROM [Blogs] AS [b]\nWHERE [b].[Name] = N'foo'", new IRelationalParameter[] { });
            var emptyValueBuffer = ValueBuffer.Empty;
            var blogEntityType = materializerLiftableConstantContext.Dependencies.Model.FindEntityType("Blog");
            var key = blogEntityType.FindPrimaryKey();
            var emptySnapshot = Snapshot.Empty;
            var blogEntityType0 = (RuntimeEntityType)blogEntityType;
            return (QueryContext queryContext) => SingleQueryingEnumerable.Create((RelationalQueryContext)queryContext, (parameters) => relationalCommandTemplate, null, (QueryContext queryContext, DbDataReader dataReader, ResultContext resultContext, SingleQueryResultCoordinator resultCoordinator) =>
{
    IEntityType entityType1 = default;
    bool hasNullKey1 = default;
    var materializationContext1 = new MaterializationContext(in emptyValueBuffer, queryContext.Context);
    var instance1 = default(Blog);
    var entry1 = queryContext.TryGetEntry(key, new object[] { dataReader.GetInt32(0) }, true, out hasNullKey1);
    if (!hasNullKey1)
    {
        if (entry1 != default(InternalEntityEntry))
        {
            entityType1 = entry1.EntityType;
            instance1 = (Blog)entry1.Entity;
        }
        else
        {
            var shadowSnapshot1 = emptySnapshot;
            entityType1 = blogEntityType;
            if (entityType1 == blogEntityType)
            {
                var instance = new Blog();
                UnsafeAccessor_Blog_Id_Set(instance) = dataReader.GetInt32(0);
                UnsafeAccessor_Blog_Name_Set(instance) = dataReader.IsDBNull(1) ? default : dataReader.GetString(1);
                if (instance is IInjectableService)
                {
                    ((IInjectableService)instance).Injected(materializationContext1.Context, instance, QueryTrackingBehavior.TrackAll, blogEntityType0);
                }

                instance1 = instance;
            }
            else
            {
                instance1 = default;
            }

            entry1 = entityType1 == default(IEntityType) ? default : queryContext.StartTracking(entityType1, instance1, in shadowSnapshot1);
        }
    }

    var entity = instance1;
    return entity;
}, typeof(BlogContext), false, false, true);
        }

        private static object Query1_Executor;

        #endregion Query1
        #region Unsafe accessors
        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Id>k__BackingField")]
        private static extern ref int UnsafeAccessor_Blog_Id_Set(Blog instance);
        [UnsafeAccessor(UnsafeAccessorKind.Field, Name = "<Name>k__BackingField")]
        private static extern ref string UnsafeAccessor_Blog_Name_Set(Blog instance);
        #endregion Unsafe accessors
    }
}

namespace System.Runtime.CompilerServices
{
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)]
    sealed class InterceptsLocationAttribute : Attribute
    {
        public InterceptsLocationAttribute(string filePath, int line, int column) { }
    }
}
